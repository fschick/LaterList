<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="nlog-internal.log">

  <targets>

    <target name="log_to_console"
            xsi:type="ColoredConsole"
            detectConsoleAvailable="true"
            layout="${longdate}&#009;${level:uppercase=true}&#009;${message}&#009;${exception:format=tostring}">
    </target>

    <target name="log_to_sentinel"
            xsi:type="NLogViewer"
            address="udp://127.0.0.1:9999"
            includeNdlc="true">
    </target>

    <target name="log_to_sentinel_ef"
            xsi:type="NLogViewer"
            address="udp://127.0.0.1:9998"
            includeNdlc="true">
    </target>

    <target name="log_to_file"
            xsi:type="File"
            archiveAboveSize="31457280"
            maxArchiveFiles="5"
            archiveOldFileOnStartup="true"
            keepFileOpen="true"
            concurrentWrites="false"
            openFileCacheTimeout="30"
            fileName="${basedir}/IMC.Studio.Remote.Server.HttpSys.log.txt"
            layout="${longdate}|${level:uppercase=true}|${logger}|${event-properties:item=EventId_Id}|${ndlc:separator= => }|${message}|${exception:format=tostring}|${callsite:className=true:fileName=true:includeSourcePath=false:methodName=true:cleanNamesOfAnonymousDelegates=true}|${stacktrace}">
    </target>

    <target name="log_to_csv"
            xsi:type="File"
            fileName="${basedir}/IMC.Studio.Remote.Server.HttpSys.log.csv">
      <layout xsi:type="CsvLayout" quoting="all" delimiter="Semicolon">
        <column name="Created" layout="${longdate}" />
        <column name="LogLevel" layout="${level:uppercase=true}" />
        <column name="Logger" layout="${logger}" />
        <column name="EventId" layout="${event-properties:item=EventId_Id}" />
        <column name="Scope" layout="${ndlc:separator= => }" />
        <column name="Message" layout="${message}" />
        <column name="Exception" layout="${exception:format=tostring}" />
        <column name="Callsite" layout="${callsite:className=true:fileName=true:includeSourcePath=false:methodName=true:cleanNamesOfAnonymousDelegates=true}" />
        <column name="Stacktrace" layout="${stacktrace}" />
      </layout>
    </target>

    <!--
    <target name="log_to_database"
            xsi:type="Database"
            dbProvider="System.Data.SQLite.SQLiteConnection, System.Data.SQLite"
            connectionString="Data Source=${basedir}\IMC.Studio.Remote.Server.HttpSys.log.db;Version=3;"
            keepConnection="false">

      <install-command commandType="Text" ignoreFailures="false">
        <text>
          CREATE TABLE IF NOT EXISTS Log (
            Created DATETIME,
            Loglevel TEXT,
            Logger TEXT,
            EventId TEXT,
            Scope TEXT,
            Message TEXT,
            Exception TEXT,
            Callsite TEXT,
            Stacktrace TEXT
          )
        </text>
      </install-command>

      <commandText>
        INSERT INTO Log (
          Created,
          Loglevel,
          Logger,
          EventId,
          Scope,
          Message,
          Exception,
          Callsite,
          Stacktrace
        ) VALUES (
          @Created,
          @Loglevel,
          @Logger,
          @EventId,
          @Scope,
          @Message,
          @Exception,
          @Callsite,
          @Stacktrace
        )
      </commandText>

      <parameter name="@Created" layout="${longdate}" />
      <parameter name="@LogLevel" layout="${level:uppercase=true}" />
      <parameter name="@Logger" layout="${logger}" />
      <parameter name="@EventId" layout="${event-properties:item=EventId_Id}" />
      <parameter name="@Scope" layout="${ndlc:separator= => }" />
      <parameter name="@Message" layout="${message}" />
      <parameter name="@Exception" layout="${exception:format=tostring}" />
      <parameter name="@Callsite" layout="${callsite:className=true:fileName=true:includeSourcePath=false:methodName=true:cleanNamesOfAnonymousDelegates=true}" />
      <parameter name="@Stacktrace" layout="${stacktrace}" />
    </target>
    -->

  </targets>

  <rules>

    <!-- All logs to sentinel, including from Microsoft -->
    <!-- Can causes error: An error occurred while writing to logger(s). (Exception occurred in NLog) - NLog.NLogRuntimeException: Exception occurred in NLog - System.IO.IOException: Error: NoBufferSpaceAvailable - End of inner exception stack trace -->
    <logger name="*" minlevel="Trace" writeTo="log_to_sentinel" />

    <!-- Log EF DB commands to sentinel (EF) -->
    <logger name="Microsoft.EntityFrameworkCore.Database.Command" level="Info" writeTo="log_to_sentinel_ef" />

    <!-- Discard finally non-critical logs from Microsoft -->
    <logger name="Microsoft.*" maxlevel="Info" final="true" />

    <!-- All custom and critical Microsoft logs (non-discarded above) to console -->
    <logger name="*" minlevel="Trace" writeTo="log_to_console" />

    <!-- Logs higher than Warn (Warn, Error, Fatal) and critical Microsoft logs (non-discarded from above) to database -->
    <!--<logger name="*" minlevel="Warn" writeTo="log_to_database" />-->

    <!-- Logs higher than Warn (Warn, Error, Fatal) and critical Microsoft logs (non-discarded from above) to text file -->
    <!--<logger name="*" minlevel="Warn" writeTo="log_to_file" />-->

    <!-- Logs higher than Warn (Warn, Error, Fatal) and critical Microsoft logs (non-discarded from above) to CSV file -->
    <!--<logger name="*" minlevel="Warn" writeTo="log_to_csv" />-->

  </rules>
</nlog>
